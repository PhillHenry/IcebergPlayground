<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>uk.co.odinconsultants</groupId>
    <artifactId>IcebergPlayground_${scala.compat.version}</artifactId>
    <version>0.1</version>
    <name>${project.artifactId}</name>
    <description>Katas for Apache Iceberg and various tooling</description>
    <inceptionYear>2023</inceptionYear>
    <url>https://github.com/PhillHenry/IcebergPlayground</url>
    <licenses>
        <license>
            <name>Apache License Version 2.0</name>
            <url>http://www.apache.org/licenses/</url>
        </license>
    </licenses>
    <scm>
        <url>https://github.com/PhillHenry/IcebergPlayground.git</url>
    </scm>
    <developers>
        <developer>
            <name>Phillip Henry</name>
        </developer>
    </developers>


    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <encoding>UTF-8</encoding>
        <scala.version>2.13.14</scala.version>
        <scala.compat.version>2.13</scala.compat.version>
        <spark.compat.version>3.5</spark.compat.version>
        <spark.version>${spark.compat.version}.0</spark.version>
        <iceberg.version>1.9.2</iceberg.version>
        <documentation_utils.version>0.11</documentation_utils.version>
        <kafka.version>3.9.0</kafka.version>
        <circe.version>0.15.0-M1</circe.version>
<!--        <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>-->
<!--        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>-->
<!--        <quarkus.platform.version>3.25.4</quarkus.platform.version>-->
    </properties>


<!--    <dependencyManagement>-->
<!--        <dependencies>-->
<!--            <dependency>-->
<!--                <groupId>${quarkus.platform.group-id}</groupId>-->
<!--                <artifactId>${quarkus.platform.artifact-id}</artifactId>-->
<!--                <version>${quarkus.platform.version}</version>-->
<!--                <type>pom</type>-->
<!--                <scope>import</scope>-->
<!--            </dependency>-->
<!--        </dependencies>-->
<!--    </dependencyManagement>-->

    <dependencies>
<!--        <dependency>-->
<!--            <groupId>io.quarkus</groupId>-->
<!--            <artifactId>quarkus-resteasy</artifactId>-->
<!--            <version>${quarkus.platform.version}</version>-->
<!--        </dependency>-->

        <dependency>
            <groupId>org.apache.iceberg</groupId>
            <artifactId>iceberg-spark-runtime-${spark.compat.version}_${scala.compat.version}
            </artifactId>
            <version>${iceberg.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.iceberg</groupId>
            <artifactId>iceberg-kafka-connect</artifactId>
            <version>${iceberg.version}</version>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
        </dependency>
        <dependency>
            <groupId>org.scala-lang.modules</groupId>
            <artifactId>scala-collection-compat_${scala.compat.version}</artifactId>
            <version>2.10.0</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.17.2</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-scala_${scala.compat.version}</artifactId>
            <version>2.17.2</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.compat.version}</artifactId>
            <version>3.2.9</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.11</version>
        </dependency>
        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-core</artifactId>
            <version>4.0.7</version>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>connect-api</artifactId>
            <version>${kafka.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>connect-json</artifactId>
            <version>${kafka.version}</version>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.27.4</version>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <version>4.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <version>1.21.3</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.11.3</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.compat.version}</artifactId>
            <version>${spark.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-hive_${scala.compat.version}</artifactId>
            <version>${spark.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.25</version>
        </dependency>
        <dependency>
            <groupId>uk.co.odinconsultants.documentation_utils</groupId>
            <artifactId>scalatest_utils</artifactId>
            <version>${documentation_utils.version}</version>
        </dependency>
        <dependency>
            <groupId>uk.co.odinconsultants.documentation_utils</groupId>
            <artifactId>spark</artifactId>
            <version>${documentation_utils.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql-kafka-0-10_${scala.compat.version}</artifactId>
            <version>${spark.version}</version> <!-- org.apache.kafka:kafka-clients -->
            <exclusions>
                <exclusion>
                    <groupId>org.apache.kafka</groupId>
                    <artifactId>kafka-clients</artifactId>
                </exclusion>
            </exclusions>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka_${scala.compat.version}</artifactId>
            <version>${kafka.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>io.circe</groupId>
            <artifactId>circe-core_${scala.compat.version}</artifactId>
            <version>${circe.version}</version>
        </dependency>
        <dependency>
            <groupId>io.circe</groupId>
            <artifactId>circe-generic_${scala.compat.version}</artifactId>
            <version>${circe.version}</version>
        </dependency>
        <dependency>
            <groupId>io.circe</groupId>
            <artifactId>circe-parser_${scala.compat.version}</artifactId>
            <version>${circe.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents.client5</groupId>
            <artifactId>httpclient5-fluent</artifactId>
            <version>5.5</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-aws -->
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-aws</artifactId>
            <version>3.4.2</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.cloud/google-cloud-storage -->
        <dependency>
            <groupId>com.google.cloud</groupId>
            <artifactId>google-cloud-storage</artifactId>
            <version>2.57.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
<!--            <plugin>-->
<!--                <groupId>io.quarkus.platform</groupId>-->
<!--                <artifactId>quarkus-maven-plugin</artifactId>-->
<!--                <version>${quarkus.platform.version}</version>-->
<!--                <extensions>true</extensions>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <goals>-->
<!--                            <goal>build</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
            <plugin>
                <groupId>org.eclipse.jkube</groupId>
                <artifactId>openshift-maven-plugin</artifactId>
                <version>1.17.0</version>
            </plugin>
            <plugin>
                <!-- run with something like mvn post-integration-test  -Dsuites='uk.co.odinconsultants.iceberg.ConcurrentWriteSpec' -->
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.45.0</version>
                <executions>
                    <execution>
                        <id>prepare-polaris</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <configuration>
                            <images>
                                <image>
                                    <name>ph1ll1phenry/polaris_for_bdd</name>
                                    <alias>polaris</alias>
                                    <run>
                                        <env>
                                            <RUN_USER_ID>${docker.uid}</RUN_USER_ID>
                                            <RUN_GROUP_ID>${docker.gid}</RUN_GROUP_ID>
                                            <JAVA_OPTS>-Dpolaris.bootstrap.credentials=POLARIS,root,s3cr3t</JAVA_OPTS>
                                            <QUARKUS_PROFILE>prod</QUARKUS_PROFILE>
<!--                                            <POLARIS_BOOTSTRAP_CREDENTIALS>POLARIS,root,secret</POLARIS_BOOTSTRAP_CREDENTIALS>-->
                                        </env>
                                        <ports>
                                            <port>8181:8181</port>
                                        </ports>
                                        <volumes>
                                            <bind>
                                                <volume>/tmp:/tmp</volume>
                                            </bind>
                                        </volumes>
                                        <wait>
                                            <log>Profile prod activated</log>
                                            <time>10000</time>
                                        </wait>
                                    </run>
                                </image>
                                <image>
                                    <name>apache/kafka-native:3.9.0</name>
                                    <alias>kafka</alias>
                                    <run>
                                        <ports>
                                            <port>9092:9092</port>
                                        </ports>
                                        <wait>
                                            <log>Kafka Server started</log>
                                            <time>10000</time>
                                        </wait>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                    </execution>
                    <execution>
                        <id>remove-polaris</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <compilerArgs>
                        <arg>--add-exports=java.base/sun.net.util=ALL-UNNAMED</arg>
                        <arg>--add-exports=java.management/sun.management=ALL-UNNAMED</arg>
                        <arg>--add-exports=java.rmi/sun.rmi.registry=ALL-UNNAMED</arg>
                        <arg>--add-exports=java.security.jgss/sun.security.krb5=ALL-UNNAMED</arg>
                        <arg>--add-opens=java.base/java.nio=ALL-UNNAMED</arg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <plugin>
                <!-- see http://davidb.github.com/scala-maven-plugin -->
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>4.9.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                        <configuration>
                            <args>
                                <arg>-dependencyfile</arg>
                                <arg>${project.build.directory}/.scala_dependencies</arg>
                                <arg>-Ywarn-value-discard</arg>
                            </args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
                <version>2.2.0</version>
                <!-- Note config is repeated in surefire config -->
                <configuration>
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                    <junitxml>.</junitxml>
                    <stderr/>
                    <filereports>W scenarios.txt</filereports>
                    <forkMode>once</forkMode>
                    <argLine>--add-exports=java.base/sun.util.calendar=ALL-UNNAMED --add-exports java.base/sun.nio.ch=ALL-UNNAMED --add-exports=java.base/sun.net.util=ALL-UNNAMED --add-exports=java.management/sun.management=ALL-UNNAMED --add-exports=java.rmi/sun.rmi.registry=ALL-UNNAMED --add-exports=java.security.jgss/sun.security.krb5=ALL-UNNAMED --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED --enable-preview</argLine>
                </configuration>
                <executions>
                    <execution>
                        <id>test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>scenario_docs</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.4.1</version>
                        <executions>
                            <execution>
                                <id>ansi2html</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <executable>java</executable>
                            <includePluginDependencies>true</includePluginDependencies>
                            <includeProjectDependencies>true</includeProjectDependencies>
                            <arguments>
                                <argument>-classpath</argument>
                                <classpath/>
                                <argument>uk.co.odinconsultants.documentation_utils.SplitScenariosMain</argument>
                                <argument>## Iceberg Playground

These are BDD (Behaviour Driven Design) tests that both test
the code and generate human readable documentation.
This was run against Spark version ${spark.compat.version} and Iceberg version ${iceberg.version}
The code for these tests can be found in [GitHub](${url})


                                </argument>
                            </arguments>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <distributionManagement>
        <snapshotRepository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

</project>
